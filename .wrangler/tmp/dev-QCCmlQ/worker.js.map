{
  "version": 3,
  "sources": ["../bundle-UkLF3P/checked-fetch.js", "../../../src/worker.js", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-UkLF3P/middleware-insertion-facade.js", "../../../node_modules/wrangler/templates/middleware/common.ts", "../bundle-UkLF3P/middleware-loader.entry.ts"],
  "sourceRoot": "F:\\Projects\\AI\\affiliate_dev\\interactive-stores\\.wrangler\\tmp\\dev-QCCmlQ",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "// This file serves as the entry point for the Cloudflare Worker\r\n// We'll avoid using Node.js built-in modules for Cloudflare Workers compatibility\r\n\r\n// Helper function for local development to read/write from local files\r\nasync function getLocalKvValue(key, options = {}) {\r\n  try {\r\n    // In local development, read from dev-data folder\r\n    const filePath = `./dev-data/${key}.json`;\r\n    \r\n    // Use conditional import or fetch API instead of Node's fs\r\n    let data;\r\n    try {\r\n      const file = Bun ? Bun.file(filePath) : null;\r\n      if (file && await file.exists()) {\r\n        data = await file.text();\r\n      } else {\r\n        // Fallback for Cloudflare Workers without Bun\r\n        const response = await fetch(`file://${filePath}`);\r\n        if (response.ok) {\r\n          data = await response.text();\r\n        } else {\r\n          return null;\r\n        }\r\n      }\r\n      return options.type === 'json' ? JSON.parse(data) : data;\r\n    } catch (e) {\r\n      console.error('File read error:', e);\r\n      return null;\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error reading local KV value for key ${key}:`, error);\r\n    return null;\r\n  }\r\n}\r\n\r\n// Helper function for local development to write to local files\r\nasync function putLocalKvValue(key, value) {\r\n  try {\r\n    // In local development, write to dev-data folder\r\n    const filePath = `./dev-data/${key}.json`;\r\n    const stringValue = typeof value === 'string' ? value : JSON.stringify(value, null, 2);\r\n    \r\n    // Use Bun's API if available\r\n    if (typeof Bun !== 'undefined') {\r\n      await Bun.write(filePath, stringValue);\r\n    } else {\r\n      // Fallback in Cloudflare Workers\r\n      // Note: In actual Workers environment, this won't be used\r\n      // as we'll use the KV store directly\r\n      console.warn('Writing to local filesystem is not supported in this environment');\r\n    }\r\n    return true;\r\n  } catch (error) {\r\n    console.error(`Error writing local KV value for key ${key}:`, error);\r\n    return false;\r\n  }\r\n}\r\n\r\n// Helper to format D1 store data to match the KV structure\r\nfunction formatStoreDataFromD1(stores, deals) {\r\n  const formattedStores = {};\r\n  \r\n  for (const store of stores) {\r\n    formattedStores[store.id] = {\r\n      name: store.name,\r\n      logo: store.logo,\r\n      bgColor: store.bg_color,\r\n      color: store.color,\r\n      active: Boolean(store.active),\r\n      deals: []\r\n    };\r\n  }\r\n  \r\n  // Add deals to their respective stores\r\n  for (const deal of deals) {\r\n    if (formattedStores[deal.store_id]) {\r\n      formattedStores[deal.store_id].deals.push({\r\n        id: deal.id.toString(),\r\n        title: deal.title,\r\n        description: deal.description,\r\n        importance: deal.importance,\r\n        link: deal.link,\r\n        active: Boolean(deal.active)\r\n      });\r\n    }\r\n  }\r\n  \r\n  return formattedStores;\r\n}\r\n\r\n// Helper to format D1 footer links data to match the KV structure\r\nfunction formatFooterLinksFromD1(categories, links) {\r\n  const formattedLinks = {};\r\n  \r\n  // Create an empty array for each category\r\n  for (const category of categories) {\r\n    formattedLinks[category.name] = [];\r\n  }\r\n  \r\n  // Add links to their respective categories\r\n  for (const link of links) {\r\n    const category = categories.find(c => c.id === link.category_id);\r\n    if (category) {\r\n      formattedLinks[category.name].push({\r\n        id: link.id.toString(),\r\n        title: link.title,\r\n        link: link.link,\r\n        active: Boolean(link.active)\r\n      });\r\n    }\r\n  }\r\n  \r\n  return formattedLinks;\r\n}\r\n\r\nexport default {\r\n  async fetch(request, env, ctx) {\r\n    const url = new URL(request.url);\r\n    \r\n    // Determine if we're running in local development\r\n    const isLocalDev = !env.STORES_DB;\r\n    const useD1 = !isLocalDev || (isLocalDev && env.STORES_DB); // Use D1 if available\r\n    \r\n    // If running locally without D1, create a mock KV namespace\r\n    const kv = isLocalDev && !useD1\r\n      ? {\r\n          get: (key, options) => getLocalKvValue(key, options),\r\n          put: (key, value) => putLocalKvValue(key, value),\r\n        }\r\n      : env.STORE_DATA;\r\n    \r\n    // Database instance\r\n    const db = useD1 ? env.STORES_DB : null;\r\n    \r\n    // Handle API requests \r\n    if (url.pathname.startsWith('/api/')) {\r\n      // API endpoint to get all data\r\n      if (url.pathname === '/api/data' && request.method === 'GET') {\r\n        try {\r\n          // Debug info\r\n          console.log('API request for /api/data');\r\n          console.log('isLocalDev:', isLocalDev);\r\n          console.log('useD1:', useD1);\r\n          console.log('env.STORES_DB:', !!env.STORES_DB);\r\n          \r\n          if (useD1) {\r\n            console.log('Using D1 database');\r\n            // Get data from D1 database\r\n            const [stores, deals, categories, links, admins] = await Promise.all([\r\n              db.prepare('SELECT * FROM stores WHERE active = 1').all(),\r\n              db.prepare('SELECT * FROM deals WHERE active = 1').all(),\r\n              db.prepare('SELECT * FROM footer_link_categories').all(),\r\n              db.prepare('SELECT * FROM footer_links WHERE active = 1').all(),\r\n              db.prepare('SELECT id, username, role FROM admins').all()\r\n            ]);\r\n            \r\n            console.log('D1 query results:');\r\n            console.log('stores:', stores.results.length);\r\n            console.log('deals:', deals.results.length);\r\n            console.log('categories:', categories.results.length);\r\n            console.log('links:', links.results.length);\r\n            console.log('admins:', admins.results.length);\r\n            \r\n            // Format data to match the expected structure\r\n            const formattedStores = formatStoreDataFromD1(stores.results, deals.results);\r\n            const formattedFooterLinks = formatFooterLinksFromD1(categories.results, links.results);\r\n            \r\n            return new Response(JSON.stringify({ \r\n              stores: formattedStores, \r\n              footerLinks: formattedFooterLinks,\r\n              admins: admins.results\r\n            }), {\r\n              headers: {\r\n                'Content-Type': 'application/json',\r\n              },\r\n            });\r\n          }\r\n          \r\n          // Fall through to KV logic if D1 is not available\r\n          // Get data from KV store or local files in dev mode\r\n          const stores = await kv.get('stores', { type: 'json' });\r\n          const footerLinks = await kv.get('footerLinks', { type: 'json' });\r\n          const admins = await kv.get('admins', { type: 'json' });\r\n          \r\n          return new Response(JSON.stringify({ \r\n            stores: stores || {}, \r\n            footerLinks: footerLinks || {},\r\n            admins: admins || []\r\n          }), {\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n          });\r\n        } catch (error) {\r\n          return new Response(\r\n            JSON.stringify({ \r\n              success: false, \r\n              error: error.message \r\n            }), {\r\n              status: 500,\r\n              headers: {\r\n                'Content-Type': 'application/json',\r\n              },\r\n            }\r\n          );\r\n        }\r\n      }\r\n      \r\n      // API endpoint to save data\r\n      if (url.pathname === '/api/admin/save' && request.method === 'POST') {\r\n        try {\r\n          // Parse the request body\r\n          const data = await request.json();\r\n          \r\n          if (useD1) {\r\n            // Start a transaction\r\n            await db.exec('BEGIN TRANSACTION');\r\n            \r\n            try {\r\n              // Process stores and deals\r\n              if (data.stores) {\r\n                for (const [storeId, storeData] of Object.entries(data.stores)) {\r\n                  // Check if the store exists\r\n                  const existingStore = await db.prepare('SELECT id FROM stores WHERE id = ?')\r\n                    .bind(storeId)\r\n                    .first();\r\n                  \r\n                  if (existingStore) {\r\n                    // Update existing store\r\n                    await db.prepare(`\r\n                      UPDATE stores \r\n                      SET name = ?, logo = ?, bg_color = ?, color = ?, active = ?, updated_at = CURRENT_TIMESTAMP\r\n                      WHERE id = ?\r\n                    `)\r\n                    .bind(\r\n                      storeData.name,\r\n                      storeData.logo,\r\n                      storeData.bgColor,\r\n                      storeData.color,\r\n                      storeData.active ? 1 : 0,\r\n                      storeId\r\n                    )\r\n                    .run();\r\n                  } else {\r\n                    // Insert new store\r\n                    const result = await db.prepare(`\r\n                      INSERT INTO stores (name, logo, bg_color, color, active)\r\n                      VALUES (?, ?, ?, ?, ?)\r\n                    `)\r\n                    .bind(\r\n                      storeData.name,\r\n                      storeData.logo,\r\n                      storeData.bgColor,\r\n                      storeData.color,\r\n                      storeData.active ? 1 : 0\r\n                    )\r\n                    .run();\r\n                  }\r\n                  \r\n                  // Process deals\r\n                  if (storeData.deals && storeData.deals.length > 0) {\r\n                    // Delete existing deals for this store \r\n                    await db.prepare('DELETE FROM deals WHERE store_id = ?')\r\n                      .bind(storeId)\r\n                      .run();\r\n                    \r\n                    // Insert new deals\r\n                    for (const deal of storeData.deals) {\r\n                      await db.prepare(`\r\n                        INSERT INTO deals (store_id, title, description, importance, link, active)\r\n                        VALUES (?, ?, ?, ?, ?, ?)\r\n                      `)\r\n                      .bind(\r\n                        storeId,\r\n                        deal.title,\r\n                        deal.description || '',\r\n                        deal.importance || 'medium',\r\n                        deal.link || '',\r\n                        deal.active ? 1 : 0\r\n                      )\r\n                      .run();\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n              \r\n              // Process footer links\r\n              if (data.footerLinks) {\r\n                for (const [categoryName, links] of Object.entries(data.footerLinks)) {\r\n                  // Get category ID\r\n                  const category = await db.prepare('SELECT id FROM footer_link_categories WHERE name = ?')\r\n                    .bind(categoryName)\r\n                    .first();\r\n                  \r\n                  if (!category) continue;\r\n                  \r\n                  // Delete existing links for this category\r\n                  await db.prepare('DELETE FROM footer_links WHERE category_id = ?')\r\n                    .bind(category.id)\r\n                    .run();\r\n                  \r\n                  // Insert new links\r\n                  if (links && links.length > 0) {\r\n                    for (const link of links) {\r\n                      await db.prepare(`\r\n                        INSERT INTO footer_links (category_id, title, link, active)\r\n                        VALUES (?, ?, ?, ?)\r\n                      `)\r\n                      .bind(\r\n                        category.id,\r\n                        link.title,\r\n                        link.link,\r\n                        link.active ? 1 : 0\r\n                      )\r\n                      .run();\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n              \r\n              // Commit the transaction\r\n              await db.exec('COMMIT');\r\n              \r\n            } catch (error) {\r\n              // Rollback on error\r\n              await db.exec('ROLLBACK');\r\n              throw error;\r\n            }\r\n            \r\n            return new Response(JSON.stringify({ success: true }), {\r\n              headers: {\r\n                'Content-Type': 'application/json',\r\n              },\r\n            });\r\n          }\r\n          \r\n          // Fall through to KV logic if D1 is not available\r\n          // Save to KV store\r\n          if (data.stores) {\r\n            await kv.put('stores', JSON.stringify(data.stores));\r\n          }\r\n          \r\n          if (data.footerLinks) {\r\n            await kv.put('footerLinks', JSON.stringify(data.footerLinks));\r\n          }\r\n          \r\n          return new Response(JSON.stringify({ success: true }), {\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n          });\r\n        } catch (error) {\r\n          return new Response(\r\n            JSON.stringify({ \r\n              success: false, \r\n              error: error.message \r\n            }), {\r\n              status: 500,\r\n              headers: {\r\n                'Content-Type': 'application/json',\r\n              },\r\n            }\r\n          );\r\n        }\r\n      }\r\n      \r\n      // API endpoint to initialize database\r\n      if (url.pathname === '/api/admin/init-db' && request.method === 'POST') {\r\n        try {\r\n          // This endpoint is handled by the init-d1 script\r\n          return new Response(JSON.stringify({ \r\n            success: true,\r\n            message: 'Use the bun run init-d1 command to initialize the database'\r\n          }), {\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n          });\r\n        } catch (error) {\r\n          return new Response(\r\n            JSON.stringify({ \r\n              success: false, \r\n              error: error.message \r\n            }), {\r\n              status: 500,\r\n              headers: {\r\n                'Content-Type': 'application/json',\r\n              },\r\n            }\r\n          );\r\n        }\r\n      }\r\n      \r\n      // API endpoint to get all stores (admin)\r\n      if (url.pathname === '/api/admin/stores' && request.method === 'GET') {\r\n        try {\r\n          if (useD1) {\r\n            // Get all stores from D1 database\r\n            const stores = await db.prepare('SELECT * FROM stores ORDER BY name').all();\r\n            return new Response(JSON.stringify({ \r\n              success: true,\r\n              stores: stores.results \r\n            }), {\r\n              headers: {\r\n                'Content-Type': 'application/json',\r\n              },\r\n            });\r\n          }\r\n          \r\n          // Fall through to KV logic if D1 is not available\r\n          const stores = await kv.get('stores', { type: 'json' });\r\n          return new Response(JSON.stringify({ \r\n            success: true,\r\n            stores: stores || {} \r\n          }), {\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n          });\r\n        } catch (error) {\r\n          return new Response(\r\n            JSON.stringify({ \r\n              success: false, \r\n              error: error.message \r\n            }), {\r\n              status: 500,\r\n              headers: {\r\n                'Content-Type': 'application/json',\r\n              },\r\n            }\r\n          );\r\n        }\r\n      }\r\n      \r\n      // API endpoint to get a specific store (admin)\r\n      if (url.pathname.startsWith('/api/admin/stores/') && request.method === 'GET') {\r\n        try {\r\n          const storeId = url.pathname.split('/').pop();\r\n          \r\n          if (useD1) {\r\n            // Get store from D1 database\r\n            const [store, deals] = await Promise.all([\r\n              db.prepare('SELECT * FROM stores WHERE id = ?').bind(storeId).first(),\r\n              db.prepare('SELECT * FROM deals WHERE store_id = ? ORDER BY title').bind(storeId).all()\r\n            ]);\r\n            \r\n            if (!store) {\r\n              return new Response(JSON.stringify({ \r\n                success: false,\r\n                error: 'Store not found' \r\n              }), {\r\n                status: 404,\r\n                headers: {\r\n                  'Content-Type': 'application/json',\r\n                },\r\n              });\r\n            }\r\n            \r\n            return new Response(JSON.stringify({ \r\n              success: true,\r\n              store: {\r\n                ...store,\r\n                deals: deals.results\r\n              }\r\n            }), {\r\n              headers: {\r\n                'Content-Type': 'application/json',\r\n              },\r\n            });\r\n          }\r\n          \r\n          // Fall through to KV logic if D1 is not available\r\n          const stores = await kv.get('stores', { type: 'json' });\r\n          const store = stores?.[storeId];\r\n          \r\n          if (!store) {\r\n            return new Response(JSON.stringify({ \r\n              success: false,\r\n              error: 'Store not found' \r\n            }), {\r\n              status: 404,\r\n              headers: {\r\n                'Content-Type': 'application/json',\r\n              },\r\n            });\r\n          }\r\n          \r\n          return new Response(JSON.stringify({ \r\n            success: true,\r\n            store: store \r\n          }), {\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n          });\r\n        } catch (error) {\r\n          return new Response(\r\n            JSON.stringify({ \r\n              success: false, \r\n              error: error.message \r\n            }), {\r\n              status: 500,\r\n              headers: {\r\n                'Content-Type': 'application/json',\r\n              },\r\n            }\r\n          );\r\n        }\r\n      }\r\n      \r\n      // API endpoint to create a new store (admin)\r\n      if (url.pathname === '/api/admin/stores' && request.method === 'POST') {\r\n        try {\r\n          const data = await request.json();\r\n          \r\n          if (useD1) {\r\n            // Start a transaction\r\n            await db.exec('BEGIN TRANSACTION');\r\n            \r\n            try {\r\n              // Insert new store\r\n              const result = await db.prepare(`\r\n                INSERT INTO stores (name, logo, bg_color, color, active)\r\n                VALUES (?, ?, ?, ?, ?)\r\n              `)\r\n              .bind(\r\n                data.name,\r\n                data.logo,\r\n                data.bgColor,\r\n                data.color,\r\n                data.active ? 1 : 0\r\n              )\r\n              .run();\r\n              \r\n              // Get the new store ID\r\n              const storeId = result.meta.last_row_id;\r\n              \r\n              // Process deals if provided\r\n              if (data.deals && data.deals.length > 0) {\r\n                for (const deal of data.deals) {\r\n                  await db.prepare(`\r\n                    INSERT INTO deals (store_id, title, description, importance, link, active)\r\n                    VALUES (?, ?, ?, ?, ?, ?)\r\n                  `)\r\n                  .bind(\r\n                    storeId,\r\n                    deal.title,\r\n                    deal.description || '',\r\n                    deal.importance || 'medium',\r\n                    deal.link || '',\r\n                    deal.active ? 1 : 0\r\n                  )\r\n                  .run();\r\n                }\r\n              }\r\n              \r\n              // Commit the transaction\r\n              await db.exec('COMMIT');\r\n              \r\n              return new Response(JSON.stringify({ \r\n                success: true,\r\n                storeId: storeId\r\n              }), {\r\n                headers: {\r\n                  'Content-Type': 'application/json',\r\n                },\r\n              });\r\n            } catch (error) {\r\n              // Rollback on error\r\n              await db.exec('ROLLBACK');\r\n              throw error;\r\n            }\r\n          }\r\n          \r\n          // Fall through to KV logic if D1 is not available\r\n          const stores = await kv.get('stores', { type: 'json' }) || {};\r\n          \r\n          // Generate a new store ID\r\n          const storeId = `store-${Date.now()}`;\r\n          \r\n          // Add the new store\r\n          stores[storeId] = {\r\n            name: data.name,\r\n            logo: data.logo,\r\n            bgColor: data.bgColor,\r\n            color: data.color,\r\n            active: data.active,\r\n            deals: data.deals || []\r\n          };\r\n          \r\n          // Save the updated stores data\r\n          await kv.put('stores', JSON.stringify(stores));\r\n          \r\n          return new Response(JSON.stringify({ \r\n            success: true,\r\n            storeId: storeId\r\n          }), {\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n          });\r\n        } catch (error) {\r\n          return new Response(\r\n            JSON.stringify({ \r\n              success: false, \r\n              error: error.message \r\n            }), {\r\n              status: 500,\r\n              headers: {\r\n                'Content-Type': 'application/json',\r\n              },\r\n            }\r\n          );\r\n        }\r\n      }\r\n      \r\n      // If we get here, it means the API endpoint was not found\r\n      return new Response(JSON.stringify({ \r\n        success: false, \r\n        error: 'API endpoint not found' \r\n      }), {\r\n        status: 404,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n    }\r\n    \r\n    // For non-API requests, check if ASSETS binding exists (in Pages environment)\r\n    if (env.ASSETS) {\r\n      return await env.ASSETS.fetch(request);\r\n    }\r\n    \r\n    // For non-API requests in pure Workers environment with no ASSETS binding\r\n    // Return a basic response for the root path\r\n    if (url.pathname === '/' || url.pathname === '') {\r\n      return new Response('Welcome to stores.deals API. Web app is served from Cloudflare Pages.', {\r\n        headers: {\r\n          'Content-Type': 'text/plain',\r\n        },\r\n      });\r\n    }\r\n    \r\n    // Any other paths not handled return 404\r\n    return new Response('Not found', {\r\n      status: 404,\r\n      headers: {\r\n        'Content-Type': 'text/plain',\r\n      },\r\n    });\r\n  },\r\n}; ", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"F:\\\\Projects\\\\AI\\\\affiliate_dev\\\\interactive-stores\\\\src\\\\worker.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"F:\\\\Projects\\\\AI\\\\affiliate_dev\\\\interactive-stores\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"F:\\\\Projects\\\\AI\\\\affiliate_dev\\\\interactive-stores\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"F:\\\\Projects\\\\AI\\\\affiliate_dev\\\\interactive-stores\\\\src\\\\worker.js\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"F:\\\\Projects\\\\AI\\\\affiliate_dev\\\\interactive-stores\\\\.wrangler\\\\tmp\\\\bundle-UkLF3P\\\\middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"F:\\\\Projects\\\\AI\\\\affiliate_dev\\\\interactive-stores\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\common.ts\";\nimport type { WorkerEntrypointConstructor } from \"F:\\\\Projects\\\\AI\\\\affiliate_dev\\\\interactive-stores\\\\.wrangler\\\\tmp\\\\bundle-UkLF3P\\\\middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"F:\\\\Projects\\\\AI\\\\affiliate_dev\\\\interactive-stores\\\\.wrangler\\\\tmp\\\\bundle-UkLF3P\\\\middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": ["stores", "admins", "store", "storeId"]
}
